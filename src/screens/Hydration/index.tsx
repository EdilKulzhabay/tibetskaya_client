import { SafeAreaView, StyleSheet, Text, Dimensions, View, TouchableOpacity, Image, Animated, Alert } from 'react-native';
import { Back } from '../../components';
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../hooks';
import { saveData, getData } from '../../utils/storage';

const { width, height } = Dimensions.get('window');

const buttonSize = width - 80;

interface HydrationData {
  drunkVolume: number;
  plannedVolume: number;
  lastUpdated: string;
}

const HydrationScreen: React.FC<{ navigation: any }> = ({ navigation }) => {
  const { user, updateUser } = useAuth();

  const [plannedVolume, setPlannedVolume] = useState(3000);
  const [drunkVolume, setDrunkVolume] = useState(0); // –í—ã–ø–∏—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  const [dropProgress, setDropProgress] = useState(0);
  
  // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
  const [animatedVolumeDisplay, setAnimatedVolumeDisplay] = useState(0);
  const [animatedPercentDisplay, setAnimatedPercentDisplay] = useState(0);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ count up
  const progressAnim = useRef(new Animated.Value(0)).current;
  const scaleAnim = useRef(new Animated.Value(1)).current;
  const drunkVolumeAnim = useRef(new Animated.Value(0)).current;
  const progressPercentAnim = useRef(new Animated.Value(0)).current;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadHydrationData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º listener'—ã –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const volumeListener = drunkVolumeAnim.addListener(({ value }) => {
      setAnimatedVolumeDisplay(Math.round(value));
    });

    const percentListener = progressPercentAnim.addListener(({ value }) => {
      setAnimatedPercentDisplay(Math.round(value));
    });

    // –û—á–∏—Å—Ç–∫–∞ listener'–æ–≤
    return () => {
      drunkVolumeAnim.removeListener(volumeListener);
      progressPercentAnim.removeListener(percentListener);
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–ø–∏—Ç–æ–≥–æ –æ–±—ä—ë–º–∞
  useEffect(() => {
    const newProgress = Math.min((drunkVolume / plannedVolume) * 100, 100);
    setDropProgress(newProgress);
  }, [drunkVolume, plannedVolume]);

  // –ê–Ω–∏–º–∞—Ü–∏—è count up –¥–ª—è –æ–±—ä—ë–º–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
  const animateCountUp = (newVolume: number) => {
    const newProgress = Math.min((newVolume / plannedVolume) * 100, 100);

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ–±—ä—ë–º–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    Animated.parallel([
      // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—ä—ë–º–∞ –≤–æ–¥—ã
      Animated.timing(drunkVolumeAnim, {
        toValue: newVolume,
        duration: 1000,
        useNativeDriver: false,
      }),
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      Animated.timing(progressPercentAnim, {
        toValue: newProgress,
        duration: 1000,
        useNativeDriver: false,
      }),
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      Animated.timing(progressAnim, {
        toValue: newProgress,
        duration: 1000,
        useNativeDriver: false,
      })
    ]).start();
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadHydrationData = async () => {
    try {
      const today = new Date().toDateString();
      const savedData = await getData<HydrationData>(`hydration_${today}`);
      
      if (savedData) {
        const volume = savedData.drunkVolume || 0;
        const planned = savedData.plannedVolume || 3000;
        const progress = Math.min((volume / planned) * 100, 100);
        
        setDrunkVolume(volume);
        setPlannedVolume(planned);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        drunkVolumeAnim.setValue(volume);
        progressPercentAnim.setValue(progress);
        progressAnim.setValue(progress);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        setAnimatedVolumeDisplay(volume);
        setAnimatedPercentDisplay(Math.round(progress));
      } else {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        drunkVolumeAnim.setValue(0);
        progressPercentAnim.setValue(0);
        progressAnim.setValue(0);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        setAnimatedVolumeDisplay(0);
        setAnimatedPercentDisplay(0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–∏–¥—Ä–∞—Ü–∏–∏:', error);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const saveHydrationData = async (newDrunkVolume: number) => {
    try {
      const today = new Date().toDateString();
      const dataToSave = {
        drunkVolume: newDrunkVolume,
        plannedVolume,
        lastUpdated: new Date().toISOString(),
      };
      
      await saveData(`hydration_${today}`, dataToSave);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        await updateUser('dailyWaterIntake', newDrunkVolume);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–∏–¥—Ä–∞—Ü–∏–∏:', error);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã
  const addWater = (amount: number) => {
    const newVolume = drunkVolume + amount;
    setDrunkVolume(newVolume);
    saveHydrationData(newVolume);

    // –ó–∞–ø—É—Å–∫ count up –∞–Ω–∏–º–∞—Ü–∏–∏
    animateCountUp(newVolume);

    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ø–ª–∏
    Animated.sequence([
      Animated.timing(scaleAnim, {
        toValue: 1.1,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true,
      })
    ]).start();

    // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
    if (newVolume >= plannedVolume) {
      setTimeout(() => {
        Alert.alert(
          'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
          '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã!',
          [{ text: '–û—Ç–ª–∏—á–Ω–æ!', style: 'default' }]
        );
      }, 1100); // –£–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
    }
  };

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è)
  const resetProgress = () => {
    Alert.alert(
      '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
      '–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–∏–¥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–°–±—Ä–æ—Å–∏—Ç—å', 
          style: 'destructive',
          onPress: () => {
            setDrunkVolume(0);
            saveHydrationData(0);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫ –Ω—É–ª—é
            animateCountUp(0);
          }
        }
      ]
    );
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <Back navigation={navigation} title="–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è" />
      <View style={styles.container}>
        {/* –ì–ª–∞–≤–Ω–∞—è –∫–∞–ø–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
        <Animated.View style={[
          styles.hydrationButton, 
          { 
            width: buttonSize, 
            height: buttonSize,
            transform: [{ scale: scaleAnim }]
          }
        ]}>
            <Image source={require('../../assets/drop.png')} style={{height: buttonSize - 40, resizeMode: 'contain'}} />
            <View style={styles.dropProgressPrecntContainer}>
            <Text style={styles.dropProgressPrecnt}>
              {animatedPercentDisplay} %
            </Text>
            </View>
            <View style={styles.dropProgressTextContainer}>
            <Text style={styles.dropProgressText}>
              {animatedVolumeDisplay} –º–ª
            </Text>
            </View>
        </Animated.View>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ */}
        <Text style={styles.plannedVolume}>{plannedVolume} –º–ª</Text>
        <Text style={styles.plannedVolumeText}>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–º –Ω–∞ –¥–µ–Ω—å</Text>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã */}
        <View style={styles.waterButtonsContainer}>
          <TouchableOpacity 
            style={styles.waterButton}
            onPress={() => addWater(250)}
          >
            <Text style={styles.waterButtonText}>+250 –º–ª</Text>
            <Text style={styles.waterButtonSubtext}>–°—Ç–∞–∫–∞–Ω</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={[styles.waterButton, styles.primaryWaterButton]}
            onPress={() => addWater(500)}
          >
            <Text style={[styles.waterButtonText, styles.primaryWaterButtonText]}>+500 –º–ª</Text>
            <Text style={[styles.waterButtonSubtext, styles.primaryWaterButtonSubtext]}>–ë—É—Ç—ã–ª–∫–∞</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.waterButton}
            onPress={() => addWater(1000)}
          >
            <Text style={styles.waterButtonText}>+1000 –º–ª</Text>
            <Text style={styles.waterButtonSubtext}>–õ–∏—Ç—Ä</Text>
          </TouchableOpacity>
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
        <TouchableOpacity 
          style={styles.resetButton}
          onPress={resetProgress}
        >
          <Text style={styles.resetButtonText}>–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: 'white',
  },
  container: {
    flex: 1,
    backgroundColor: '#f6f6f6',
    position: 'relative',
    alignItems: 'center',
  },
  hydrationButton: {
    borderRadius: "100%",
    marginTop: 50,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  dropProgressPrecntContainer: {
    position: 'absolute',
    top: "60%",
    left: "50%",
    transform: [{ translateX: "-50%" }, { translateY: "-50%" }],
  },
  dropProgressPrecnt: {
    fontSize: 32,
    fontWeight: '600',
    color: 'white',
    textAlign: 'center',
  },
  dropProgressText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#88D5F6',
    textAlign: 'center',
  },
  dropProgressTextContainer: {
    position: 'absolute',
    top: "75%",
    left: "50%",
    transform: [{ translateX: "-50%" }, { translateY: "-50%" }],
  },
  plannedVolume: {
    fontSize: 28,
    fontWeight: '700',
    color: '#000',
    marginTop: 24,
    textAlign: 'center',
  },
  plannedVolumeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#545454',
    textAlign: 'center',
    marginTop: 8,
  },
  waterButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 40,
    paddingHorizontal: 20,
    gap: 15,
  },
  waterButton: {
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 16,
    paddingVertical: 16,
    paddingHorizontal: 8,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    borderColor: '#E3E3E3',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  primaryWaterButton: {
    backgroundColor: '#DC1818',
    borderColor: '#DC1818',
  },
  waterButtonText: {
    fontSize: 14,
    fontWeight: '700',
    color: '#333',
    marginBottom: 4,
  },
  primaryWaterButtonText: {
    color: 'white',
  },
  waterButtonSubtext: {
    fontSize: 12,
    fontWeight: '500',
    color: '#666',
  },
  primaryWaterButtonSubtext: {
    color: 'rgba(255,255,255,0.8)',
  },
  resetButton: {
    marginTop: 30,
    paddingVertical: 12,
    paddingHorizontal: 20,
    backgroundColor: 'transparent',
    alignSelf: 'center',
  },
  resetButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#999',
    textDecorationLine: 'underline',
  },
});

export default HydrationScreen;