import messaging from '@react-native-firebase/messaging';
import { Platform, Alert, DeviceEventEmitter } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';

const API_URL = 'https://api.tibetskayacrm.kz';

class PushNotificationService {
  private userId: string | null = null;
  private fcmToken: string | null = null;
  private isInitialized: boolean = false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize(userId?: string) {
    console.log('üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    if (userId) {
      console.log('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ userId:', userId);
      this.userId = userId;
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const authStatus = await this.requestPermission();
    
    if (authStatus) {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
      await this.getFCMToken();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
      if (!this.isInitialized) {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)');
        this.setupNotificationHandlers();
        this.isInitialized = true;
      } else {
        console.log('‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      }
    }
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission(): Promise<boolean> {
    try {
      const authStatus = await messaging().requestPermission();
      const enabled =
        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
        authStatus === messaging.AuthorizationStatus.PROVISIONAL;

      if (enabled) {
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
        return true;
      } else {
        console.log('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  async getFCMToken(): Promise<string | null> {
    try {
      const token = await messaging().getToken();
      console.log('üì± FCM Token:', token);
      this.fcmToken = token;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
      await AsyncStorage.setItem('fcmToken', token);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å userId
      if (this.userId) {
        console.log('üì§ userId –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        await this.sendTokenToServer(token);
      } else {
        console.log('‚ö†Ô∏è userId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–æ–∫–µ–Ω –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
      
      return token;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FCM —Ç–æ–∫–µ–Ω–∞:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendTokenToServer(token: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AsyncStorage
      const userMail = await AsyncStorage.getItem('userMail');
      console.log('üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ userMail –≤ AsyncStorage:', userMail ? userMail : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      if (!userMail) {
        console.log('‚ö†Ô∏è Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AsyncStorage, —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      console.log('   URL:', `${API_URL}/saveFcmToken`);
      console.log('   Email:', userMail);
      console.log('   Platform:', Platform.OS);
      console.log('   Token (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', token.substring(0, 20) + '...');
      
      const response = await axios.post(
        `${API_URL}/saveFcmToken`,
        {
          mail: userMail,
          fcmToken: token,
          platform: Platform.OS,
        }
      );
      
      console.log('‚úÖ FCM —Ç–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ');
      console.log('   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:');
      if (error.response) {
        console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
      } else if (error.request) {
        console.error('   –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      } else {
        console.error('   –û—à–∏–±–∫–∞:', error.message);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async handleNotificationData(remoteMessage: any) {
    console.log('üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', remoteMessage.data);
    
    if (!remoteMessage.data) {
      return;
    }

    const { newStatus, order } = remoteMessage.data;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    if (newStatus === 'newOrder' && order) {
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:', order);
      try {
        const orderData = typeof order === 'string' ? JSON.parse(order) : order;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        await AsyncStorage.setItem(`order_${orderData._id || orderData.orderId}`, JSON.stringify(orderData));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:', error);
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    if (newStatus && newStatus !== 'newOrder') {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', newStatus);
      try {
        if (order) {
          const orderData = typeof order === 'string' ? JSON.parse(order) : order;
          const orderId = orderData._id || orderData.orderId;
          
          if (orderId) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const existingOrder = await AsyncStorage.getItem(`order_${orderId}`);
            if (existingOrder) {
              const parsedOrder = JSON.parse(existingOrder);
              parsedOrder.status = newStatus;
              parsedOrder.updatedAt = new Date().toISOString();
              await AsyncStorage.setItem(`order_${orderId}`, JSON.stringify(parsedOrder));
              console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${newStatus}`);
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
              DeviceEventEmitter.emit('orderStatusUpdated', { 
                orderId, 
                newStatus, 
                orderData: parsedOrder 
              });
            } else {
              // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
              console.log(`‚ÑπÔ∏è –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ`);
              orderData.status = newStatus;
              orderData.updatedAt = new Date().toISOString();
              await AsyncStorage.setItem(`order_${orderId}`, JSON.stringify(orderData));
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
              DeviceEventEmitter.emit('orderStatusUpdated', { 
                orderId, 
                newStatus, 
                orderData 
              });
            }
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
      }
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  setupNotificationHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    messaging().setBackgroundMessageHandler(async remoteMessage => {
      console.log('üì¨ –§–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', remoteMessage);
      await this.handleNotificationData(remoteMessage);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ
    messaging().onMessage(async remoteMessage => {
      console.log('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –ø–ª–∞–Ω–µ:', remoteMessage);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.handleNotificationData(remoteMessage);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –Ω–∞ iOS
      if (Platform.OS === 'ios') {
        Alert.alert(
          remoteMessage.notification?.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          remoteMessage.notification?.body || '',
          [
            {
              text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
              onPress: () => {
                console.log('üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
              },
            },
            { text: 'OK' },
          ]
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    messaging().onNotificationOpenedApp(async remoteMessage => {
      console.log('üëÜ –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ):', remoteMessage);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.handleNotificationData(remoteMessage);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–∫–∞–∑–∞
      if (remoteMessage.data?.order) {
        try {
          const orderData = typeof remoteMessage.data.order === 'string' 
            ? JSON.parse(remoteMessage.data.order) 
            : remoteMessage.data.order;
          const orderId = orderData._id || orderData.orderId;
          
          console.log('üì± –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É:', orderId);
          // NavigationService.navigate('OrderStatus', { orderId });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    messaging()
      .getInitialNotification()
      .then(async remoteMessage => {
        if (remoteMessage) {
          console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', remoteMessage);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          await this.handleNotificationData(remoteMessage);
          
          // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          if (remoteMessage.data?.order) {
            setTimeout(() => {
              try {
                if (!remoteMessage.data) return;
                
                const orderData = typeof remoteMessage.data.order === 'string' 
                  ? JSON.parse(remoteMessage.data.order) 
                  : remoteMessage.data.order;
                const orderId = orderData._id || orderData.orderId;
                
                console.log('üì± –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', orderId);
                // NavigationService.navigate('OrderStatus', { orderId });
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
              }
            }, 1000);
          }
        }
      });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    messaging().onTokenRefresh(async token => {
      console.log('üîÑ FCM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω:', token);
      this.fcmToken = token;
      await AsyncStorage.setItem('fcmToken', token);
      
      if (this.userId) {
        await this.sendTokenToServer(token);
      }
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ userId
  setUserId(userId: string) {
    this.userId = userId;
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (this.fcmToken) {
      this.sendTokenToServer(this.fcmToken);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  async clearToken() {
    try {
      if (this.fcmToken) {
        await messaging().deleteToken();
        await AsyncStorage.removeItem('fcmToken');
        this.fcmToken = null;
        this.userId = null;
        console.log('‚úÖ FCM —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
  getToken(): string | null {
    return this.fcmToken;
  }
}

export default new PushNotificationService();

