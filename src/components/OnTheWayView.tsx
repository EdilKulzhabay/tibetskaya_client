import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { OrderData } from '../types/navigation';
import MapProvider from './MapProvider';

interface OnTheWayViewProps {
  order: OrderData;
  onCallCourier?: () => void;
  onTrackOrder?: () => void;
}

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –ê–ª–º–∞—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const getDeliveryCoordinates = (address: string) => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞
  if (address.includes('–°–∞–º–∞–ª-1')) {
    return { latitude: 43.2267, longitude: 76.8782 };
  } else if (address.includes('–°–∞–º–∞–ª-2')) {
    return { latitude: 43.2156, longitude: 76.8934 };
  } else if (address.includes('–ë–æ—Å—Ç–∞–Ω–¥—ã–∫')) {
    return { latitude: 43.2065, longitude: 76.8734 };
  } else if (address.includes('–ê–±–∞—è')) {
    return { latitude: 43.2418, longitude: 76.9562 };
  } else {
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä –ê–ª–º–∞—Ç—ã
    return { latitude: 43.2220, longitude: 76.8512 };
  }
};

const OnTheWayView: React.FC<OnTheWayViewProps> = ({
  order,
  onCallCourier,
  onTrackOrder,
}) => {
  const [estimatedTime, setEstimatedTime] = useState('15-20 –º–∏–Ω');
  const [courierDistance, setCourierDistance] = useState('1.2 –∫–º');

  const deliveryLocation = order.deliveryCoordinates || getDeliveryCoordinates(order.address || '');
  const courierLocation = order.courierLocation || { latitude: 43.2065, longitude: 76.8734 };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—å–µ—Ä–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const handleCourierLocationUpdate = (newLocation: { latitude: number; longitude: number }) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    const distance = calculateDistance(newLocation, deliveryLocation);
    setCourierDistance(`${distance.toFixed(1)} –∫–º`);
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 3 –∫–º/—á–∞—Å —Å–∫–æ—Ä–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–∞)
    const timeInMinutes = Math.round((distance / 3) * 60);
    setEstimatedTime(`${timeInMinutes}-${timeInMinutes + 5} –º–∏–Ω`);
  };

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  const calculateDistance = (
    point1: { latitude: number; longitude: number },
    point2: { latitude: number; longitude: number }
  ) => {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (point2.latitude - point1.latitude) * (Math.PI / 180);
    const dLon = (point2.longitude - point1.longitude) * (Math.PI / 180);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(point1.latitude * (Math.PI / 180)) *
      Math.cos(point2.latitude * (Math.PI / 180)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  return (
    <View style={styles.container}>
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
      <View style={styles.orderInfo}>
        <Text style={styles.orderTitle}>–ó–∞–∫–∞–∑ #{order.id} –≤ –ø—É—Ç–∏</Text>
        <View style={styles.deliveryInfo}>
          <Text style={styles.deliveryText}>
            <Text style={styles.label}>–ö—É—Ä—å–µ—Ä: </Text>
            {order.courier?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            {order.courier?.rating && (
              <Text style={styles.rating}> ‚≠ê {order.courier.rating}</Text>
            )}
          </Text>
          {order.courier?.phone && (
            <Text style={styles.deliveryText}>
              <Text style={styles.label}>–¢–µ–ª–µ—Ñ–æ–Ω: </Text>
              {order.courier.phone}
            </Text>
          )}
          {order.courier?.vehicleNumber && (
            <Text style={styles.deliveryText}>
              <Text style={styles.label}>–ê–≤—Ç–æ–º–æ–±–∏–ª—å: </Text>
              {order.courier.vehicleNumber}
            </Text>
          )}
          <Text style={styles.deliveryText}>
            <Text style={styles.label}>–ê–¥—Ä–µ—Å: </Text>
            {order.fullAddress || order.address}
          </Text>
          <Text style={styles.deliveryText}>
            <Text style={styles.label}>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: </Text>
            {order.deliveryTime}
          </Text>
          {order.customerNotes && (
            <Text style={styles.deliveryText}>
              <Text style={styles.label}>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: </Text>
              {order.customerNotes}
            </Text>
          )}
        </View>
      </View>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
      {/* <View style={styles.deliveryStats}>
        <View style={styles.statItem}>
          <Text style={styles.statValue}>{estimatedTime}</Text>
          <Text style={styles.statLabel}>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏</Text>
        </View>
        <View style={styles.statDivider} />
        <View style={styles.statItem}>
          <Text style={styles.statValue}>{courierDistance}</Text>
          <Text style={styles.statLabel}>–î–æ –≤–∞—Å</Text>
        </View>
      </View> */}

      {/* –ö–∞—Ä—Ç–∞ —Å –∫—É—Ä—å–µ—Ä–æ–º */}
      <View style={styles.mapContainer}>
        <MapProvider
          courierLocation={courierLocation}
          deliveryLocation={deliveryLocation}
          showCourierRoute={true}
          onCourierLocationUpdate={handleCourierLocationUpdate}
        />
      </View>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <View style={styles.actions}>
        <TouchableOpacity 
          style={styles.button} 
          onPress={onCallCourier}
        >
          <Text style={styles.buttonText}>üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫—É—Ä—å–µ—Ä—É</Text>
        </TouchableOpacity>
      </View>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö */}
      {/* <View style={styles.productsInfo}>
        <Text style={styles.productsTitle}>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</Text>
        {order.products.map((product, index) => (
          <View key={index} style={styles.productItem}>
            {product.b12 > 0 && (
              <View style={styles.productRow}>
                <Text style={styles.productText}>‚Ä¢ {product.b12}x –í–æ–¥–∞ 12,5 –ª</Text>
                {product.price && <Text style={styles.productPrice}>{product.price} ‚Ç∏</Text>}
              </View>
            )}
            {product.b19 > 0 && (
              <View style={styles.productRow}>
                <Text style={styles.productText}>‚Ä¢ {product.b19}x –í–æ–¥–∞ 18,9 –ª</Text>
                {product.price && <Text style={styles.productPrice}>{product.price} ‚Ç∏</Text>}
              </View>
            )}
            {product.name && !product.b12 && !product.b19 && (
              <View style={styles.productRow}>
                <Text style={styles.productText}>‚Ä¢ {product.name}</Text>
                {product.price && <Text style={styles.productPrice}>{product.price} ‚Ç∏</Text>}
              </View>
            )}
          </View>
        ))}
        <View style={styles.orderSummary}>
          {order.subtotal && (
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>–ü–æ–¥–∏—Ç–æ–≥:</Text>
              <Text style={styles.summaryValue}>{order.subtotal} ‚Ç∏</Text>
            </View>
          )}
          {order.deliveryFee && order.deliveryFee > 0 && (
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>–î–æ—Å—Ç–∞–≤–∫–∞:</Text>
              <Text style={styles.summaryValue}>{order.deliveryFee} ‚Ç∏</Text>
            </View>
          )}
          <View style={styles.summaryRow}>
            <Text style={styles.totalAmount}>–ò—Ç–æ–≥–æ: {order.totalAmount} ‚Ç∏</Text>
          </View>
        </View>
      </View> */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f6f6f6',
  },
  orderInfo: {
    backgroundColor: 'white',
    padding: 16,
    marginBottom: 8,
  },
  orderTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#101010',
    marginBottom: 12,
  },
  deliveryInfo: {
    gap: 8,
  },
  deliveryText: {
    fontSize: 14,
    color: '#545454',
  },
  label: {
    fontWeight: '600',
    color: '#101010',
  },
  rating: {
    color: '#FF8C00',
    fontSize: 14,
    fontWeight: '500',
  },
  deliveryStats: {
    backgroundColor: 'white',
    flexDirection: 'row',
    padding: 16,
    marginBottom: 8,
    alignItems: 'center',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statValue: {
    fontSize: 24,
    fontWeight: '700',
    color: '#007AFF',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#545454',
  },
  statDivider: {
    width: 1,
    height: 40,
    backgroundColor: '#E3E3E3',
    marginHorizontal: 20,
  },
  mapContainer: {
    flex: 1,
    backgroundColor: 'white',
    marginBottom: 8,
  },
  actions: {
    backgroundColor: 'white',
    padding: 24,
    marginBottom: 30,
  },
  button: {
    backgroundColor: '#DC1818',
    padding: 16,
    borderRadius: 8,
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
  },
  productsInfo: {
    backgroundColor: 'white',
    padding: 16,
  },
  productsTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: '#101010',
    marginBottom: 12,
  },
  productItem: {
    marginBottom: 8,
  },
  productRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 4,
  },
  productText: {
    fontSize: 14,
    color: '#545454',
    flex: 1,
  },
  productPrice: {
    fontSize: 14,
    color: '#101010',
    fontWeight: '600',
  },
  orderSummary: {
    marginTop: 16,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#E3E3E3',
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  summaryLabel: {
    fontSize: 14,
    color: '#545454',
  },
  summaryValue: {
    fontSize: 14,
    color: '#101010',
    fontWeight: '500',
  },
  totalAmount: {
    fontSize: 18,
    fontWeight: '700',
    color: '#101010',
    textAlign: 'center',
  },
});

export default OnTheWayView;